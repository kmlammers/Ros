# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cob_msgs/DashboardState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cob_msgs.msg
import diagnostic_msgs.msg
import std_msgs.msg

class DashboardState(genpy.Message):
  _md5sum = "ac6926484e7f901e4a07c74a0bf08792"
  _type = "cob_msgs/DashboardState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message communicates state information that might be used by a dashboard application.
diagnostic_msgs/DiagnosticStatus diagnostics_toplevel_state

cob_msgs/PowerState power_state

cob_msgs/EmergencyStopState emergency_stop_state

================================================================================
MSG: diagnostic_msgs/DiagnosticStatus
# This message holds the status of an individual component of the robot.
# 

# Possible levels of operations
byte OK=0
byte WARN=1
byte ERROR=2
byte STALE=3

byte level # level of operation enumerated above 
string name # a description of the test/component reporting
string message # a description of the status
string hardware_id # a hardware unique string
KeyValue[] values # an array of values associated with the status


================================================================================
MSG: diagnostic_msgs/KeyValue
string key # what to label this value when viewing
string value # a value to track over time

================================================================================
MSG: cob_msgs/PowerState
# This message communicates the state of the power system.
Header header
float64 voltage                     # [V]
float64 current                     # [A]
float64 power_consumption           # [W] can only be calculated if not charging
float64 remaining_capacity          # [Ah]
float64 relative_remaining_capacity # [0..100] percent of maximum capacity (parameter max_capacity)
bool charging                       # flag if robot is connected to external power or not
float64 time_remaining              # [h] estimated time to empty or fully charged
float64 temperature                 # [Celsius] temperature of the battery

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: cob_msgs/EmergencyStopState
# This message holds the emergency stop (EMStop) status of the robot. It detects wether an EMStop is caused by the safety laserscanner or the emergency stop buttons. Moreover, it gives signalizes wether the EMStop was confirmed (after Button press stop) and the system is free again.

# Possible EMStop States
int16 EMFREE = 0 		# system operatign normal
int16 EMSTOP = 1 		# emergency stop is active (Button pressed; obstacle in safety field of scanner)
int16 EMCONFIRMED = 2 	# emergency stop was confirmed system is reinitializing and going back to normal

bool emergency_button_stop	# true = emergency stop signal is issued by button pressed
bool scanner_stop			# true = emergency stop signal is issued by scanner
int16 emergency_state		# state (including confimation by key-switch), values see above

"""
  __slots__ = ['diagnostics_toplevel_state','power_state','emergency_stop_state']
  _slot_types = ['diagnostic_msgs/DiagnosticStatus','cob_msgs/PowerState','cob_msgs/EmergencyStopState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       diagnostics_toplevel_state,power_state,emergency_stop_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DashboardState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.diagnostics_toplevel_state is None:
        self.diagnostics_toplevel_state = diagnostic_msgs.msg.DiagnosticStatus()
      if self.power_state is None:
        self.power_state = cob_msgs.msg.PowerState()
      if self.emergency_stop_state is None:
        self.emergency_stop_state = cob_msgs.msg.EmergencyStopState()
    else:
      self.diagnostics_toplevel_state = diagnostic_msgs.msg.DiagnosticStatus()
      self.power_state = cob_msgs.msg.PowerState()
      self.emergency_stop_state = cob_msgs.msg.EmergencyStopState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_b().pack(self.diagnostics_toplevel_state.level))
      _x = self.diagnostics_toplevel_state.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.diagnostics_toplevel_state.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.diagnostics_toplevel_state.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.diagnostics_toplevel_state.values)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagnostics_toplevel_state.values:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.power_state.header.seq, _x.power_state.header.stamp.secs, _x.power_state.header.stamp.nsecs))
      _x = self.power_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5dB2d2Bh().pack(_x.power_state.voltage, _x.power_state.current, _x.power_state.power_consumption, _x.power_state.remaining_capacity, _x.power_state.relative_remaining_capacity, _x.power_state.charging, _x.power_state.time_remaining, _x.power_state.temperature, _x.emergency_stop_state.emergency_button_stop, _x.emergency_stop_state.scanner_stop, _x.emergency_stop_state.emergency_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.diagnostics_toplevel_state is None:
        self.diagnostics_toplevel_state = diagnostic_msgs.msg.DiagnosticStatus()
      if self.power_state is None:
        self.power_state = cob_msgs.msg.PowerState()
      if self.emergency_stop_state is None:
        self.emergency_stop_state = cob_msgs.msg.EmergencyStopState()
      end = 0
      start = end
      end += 1
      (self.diagnostics_toplevel_state.level,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnostics_toplevel_state.name = str[start:end].decode('utf-8')
      else:
        self.diagnostics_toplevel_state.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnostics_toplevel_state.message = str[start:end].decode('utf-8')
      else:
        self.diagnostics_toplevel_state.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnostics_toplevel_state.hardware_id = str[start:end].decode('utf-8')
      else:
        self.diagnostics_toplevel_state.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagnostics_toplevel_state.values = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.diagnostics_toplevel_state.values.append(val1)
      _x = self
      start = end
      end += 12
      (_x.power_state.header.seq, _x.power_state.header.stamp.secs, _x.power_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.power_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 61
      (_x.power_state.voltage, _x.power_state.current, _x.power_state.power_consumption, _x.power_state.remaining_capacity, _x.power_state.relative_remaining_capacity, _x.power_state.charging, _x.power_state.time_remaining, _x.power_state.temperature, _x.emergency_stop_state.emergency_button_stop, _x.emergency_stop_state.scanner_stop, _x.emergency_stop_state.emergency_state,) = _get_struct_5dB2d2Bh().unpack(str[start:end])
      self.power_state.charging = bool(self.power_state.charging)
      self.emergency_stop_state.emergency_button_stop = bool(self.emergency_stop_state.emergency_button_stop)
      self.emergency_stop_state.scanner_stop = bool(self.emergency_stop_state.scanner_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_b().pack(self.diagnostics_toplevel_state.level))
      _x = self.diagnostics_toplevel_state.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.diagnostics_toplevel_state.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.diagnostics_toplevel_state.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.diagnostics_toplevel_state.values)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagnostics_toplevel_state.values:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.power_state.header.seq, _x.power_state.header.stamp.secs, _x.power_state.header.stamp.nsecs))
      _x = self.power_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5dB2d2Bh().pack(_x.power_state.voltage, _x.power_state.current, _x.power_state.power_consumption, _x.power_state.remaining_capacity, _x.power_state.relative_remaining_capacity, _x.power_state.charging, _x.power_state.time_remaining, _x.power_state.temperature, _x.emergency_stop_state.emergency_button_stop, _x.emergency_stop_state.scanner_stop, _x.emergency_stop_state.emergency_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.diagnostics_toplevel_state is None:
        self.diagnostics_toplevel_state = diagnostic_msgs.msg.DiagnosticStatus()
      if self.power_state is None:
        self.power_state = cob_msgs.msg.PowerState()
      if self.emergency_stop_state is None:
        self.emergency_stop_state = cob_msgs.msg.EmergencyStopState()
      end = 0
      start = end
      end += 1
      (self.diagnostics_toplevel_state.level,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnostics_toplevel_state.name = str[start:end].decode('utf-8')
      else:
        self.diagnostics_toplevel_state.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnostics_toplevel_state.message = str[start:end].decode('utf-8')
      else:
        self.diagnostics_toplevel_state.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnostics_toplevel_state.hardware_id = str[start:end].decode('utf-8')
      else:
        self.diagnostics_toplevel_state.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagnostics_toplevel_state.values = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.diagnostics_toplevel_state.values.append(val1)
      _x = self
      start = end
      end += 12
      (_x.power_state.header.seq, _x.power_state.header.stamp.secs, _x.power_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.power_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 61
      (_x.power_state.voltage, _x.power_state.current, _x.power_state.power_consumption, _x.power_state.remaining_capacity, _x.power_state.relative_remaining_capacity, _x.power_state.charging, _x.power_state.time_remaining, _x.power_state.temperature, _x.emergency_stop_state.emergency_button_stop, _x.emergency_stop_state.scanner_stop, _x.emergency_stop_state.emergency_state,) = _get_struct_5dB2d2Bh().unpack(str[start:end])
      self.power_state.charging = bool(self.power_state.charging)
      self.emergency_stop_state.emergency_button_stop = bool(self.emergency_stop_state.emergency_button_stop)
      self.emergency_stop_state.scanner_stop = bool(self.emergency_stop_state.scanner_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_5dB2d2Bh = None
def _get_struct_5dB2d2Bh():
    global _struct_5dB2d2Bh
    if _struct_5dB2d2Bh is None:
        _struct_5dB2d2Bh = struct.Struct("<5dB2d2Bh")
    return _struct_5dB2d2Bh
